# -*- coding: utf-8 -*-
"""Team7_2048.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dx_H2HXt0cTddHMiMIFL73j1Anse7r51
"""

from tkinter import *
from tkinter import messagebox
from random import randrange
from PIL import Image,ImageTk
import pygame
def start_game():
   start_game.showinfo()

class Board:
    bg_color = {
        '2': 'DeepPink',
        '4': 'Red',
        '8': 'SpringGreen',
        '16': 'Aqua',
        '32': '#39FF14',
        '64':'#FF00FF',
        '128':'Purple',
        '256':'Lime',
        '512':'Blue',
        '1024':'Chocolate',
        '2048':'Navy'
    }
    color = {
        '2': 'white',
        '4': 'white',
        '8': 'white',
        '16': 'white',
        '32': 'white',
        '64': 'white',
        '128':'white',
        '256':'white',
        '512':'white',
        '1024':'white',
        '2048':'white'
    }
# Create a root window
root = Tk()
root.geometry("1500x1500")


# Create a Canvas widget
canvas = Canvas(root,bg="black", width=500, height=500)
canvas.pack()

gif = Image.open("C:\\Users\\trive\\Downloads\\2048gif 1.gif")

frames = []
pygame.init()
pygame.mixer.music.load("C:\\Users\\trive\\Downloads\\into-space-134242.mp3")
pygame.mixer.music.play()
try:
    while True:
        # Append the current frame to the list
        frames.append(ImageTk.PhotoImage(gif.copy()))
        # Move to the next frame
        gif.seek(len(frames))
except EOFError:
    pass

# image on canvas
def update(index):
    frame = frames[index]
    canvas.create_image(250,250 ,image=frame)
    # Increment the index and reset it if it reaches the end of the list
    index+= 1
    if index == len(frames):
        index = 0
# Schedule the next update after 100 ms
    root.after(100, update, index)
    samp_button=Button(text="Start game",fg="blue",bg="white",font=("Helvetica",40,"italic"),command=samp)
    samp_button.place(x=500,y=520)
# Start the animation with the first frame
def samp():
    start_game.destroy()
#animation with the first frame
update(0)

#start the main loop
root.mainloop()



def update_grid():
    for widget in frame.winfo_children():
        widget.destroy()
    for i in range(4):
        for j in range(4):
            cell_value = grid[i][j]
            if cell_value == 0:
                    cell_label = Label(frame, text="", bg="gray")
            else:
                    bg_color = Board.bg_color.get(str(cell_value))
                    fg_color = Board.color.get(str(cell_value))
                    cell_label = Label(frame, text=str(cell_value), bg=bg_color, fg=fg_color, font=("Helvetica", 24))
            cell_label.grid(row=i, column=j, padx=10, pady=10, ipadx=40, ipady=40)

def new_2_or_4():
  a=randrange(4)
  if(a>=0 and a<=2):
    random_number=2
  else:
    random_number=4
  randrow=randrange(4)
  randcol=randrange(4)

  while (grid[randrow][randcol]>0):
      randrow=randrange(4)
      randcol=randrange(4)
  grid[randrow][randcol]=random_number
def merge(row2,column2,grid,score):
  merged_value = 2*grid[row2][column2]
  grid[row2][column2] = merged_value

def update_score(score):
    score_label.config(text="Score: " + str(score))

def move_left(row,grid,score):
    for col in range(1,4):
      searchcol=col-1
      while grid[row][searchcol]==0 and searchcol>0:
          searchcol=searchcol-1
      if (searchcol==0 and grid[row][searchcol]==0):
        grid[row][0]=grid[row][col]
        grid[row][col]=0

      elif(grid[row][searchcol]==grid[row][col]):
        merge(row,searchcol,grid,score)
        grid[row][col]=0
        score += grid[row][searchcol]


      elif(col>searchcol+1):
        grid[row][searchcol+1]=grid[row][col]
        grid[row][col]=0
    return score


def move_right(row,grid,score):
    for col in range(2,-1,-1):
      searchcol=col+1
      while (grid[row][searchcol]==0 and searchcol<3):
        searchcol=searchcol+1

      if (searchcol==3 and grid[row][searchcol]==0):
        grid[row][3]=grid[row][col]
        grid[row][col]=0

      elif(grid[row][searchcol]==grid[row][col]):
        merge(row, searchcol, grid, score)
        grid[row][col]=0
        score += grid[row][searchcol]


      elif(col<searchcol-1):
        grid[row][searchcol-1]=grid[row][col]
        grid[row][col]=0
    return score

def move_up(col,grid,score):
  for row in range(1,4):
    searchrow = row-1
    while (grid[searchrow][col] == 0 and searchrow > 0):
        searchrow = searchrow-1
    #searchrow is either at top or found cell that is filled
    if (searchrow == 0 and grid[searchrow][col] == 0): #searchrow is at top of column, and cell and it is not filed
      grid[0][col] = grid[row][col]
      grid[row][col] = 0 #current cell to 0 because we shifted it upwards

    elif(grid[searchrow][col] == grid[row][col]): #search row found cell that is filled and has same number
      merge(searchrow, col, grid, score)
      grid[row][col] = 0
      score += grid[searchrow][col]

    elif(row>searchrow+1): #if the cell we found is filled, and the number is not the same as current cell
      grid[searchrow+1][col] = grid[row][col]
      grid[row][col] = 0
  return score

def compare(grid1,grid2):
  for row in range(4):
    for col in range(4):
      if grid1[row][col] != grid2[row][col]:
        return False
  return True

def won():
  for row in grid:
    if 2048 in row:
      return True
  return False



def game_over(grid):
  for row in range(4):
    for col in range(4):
      if grid[row][col] == 0:
          return False
      if col < 3 and grid[row][col] == grid[row][col + 1]:
          return False
      if row < 3 and grid[row][col] == grid[row + 1][col]:
          return False
  return True




def move_down(col,grid,score):
  for row in range(2,-1,-1):
    searchrow = row+1
    while (grid[searchrow][col]==0 and searchrow<3):
        searchrow = searchrow + 1
    if (searchrow == 3 and grid[searchrow][col] == 0):
      grid[3][col] = grid[row][col]
      grid[row][col] = 0

    elif(grid[searchrow][col] == grid[row][col]):
      merge(searchrow,col,grid,score)
      grid[row][col]=0
      score += grid[searchrow][col]

    elif(row<searchrow-1):
      grid[searchrow-1][col]=grid[row][col]
      grid[row][col]=0
  return score

def new_game():
    global grid, score
    grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    score = 0
    new_2_or_4()
    new_2_or_4()
    update_grid()
    update_score(score)

def quit_game():
    if messagebox.askyesno("Quit", "Are you sure you want to quit?"):
        root.quit()
def play(event):
    global grid, score
    score_label.config(text="Score: " + str(score))
    key = event.keysym
    tempGrid = [row[:] for row in grid]

    if key == 'Up':
        for i in range(4):
            score = move_up(i, grid, score)
    elif key == 'Down':
        for i in range(4):
            score = move_down(i, grid, score)
    elif key == 'Left':
        for i in range(4):
            score = move_left(i, grid, score)
    elif key == 'Right':
        for i in range(4):
            score = move_right(i, grid, score)

    if not compare(grid, tempGrid):
        new_2_or_4()
    if won():
            messagebox.showinfo("You Won!!")
            root.quit()

    if game_over(grid):
        messagebox.showinfo("Game Over")
        messagebox.showinfo("Your Score: ",score)
        root.quit()

    update_grid()
    update_score(score)

 #main application window
grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
score = 0


root=Tk()
root.title("2048")
root.geometry("1500x1500")
width=root.winfo_screenwidth()
height=root.winfo_screenheight()
pygame.init()
pygame.mixer.music.load("C:\\Users\\trive\\Downloads\\logic-134345.mp3")
pygame.mixer.music.play()

# Create a frame to hold the grid cells
frame = Frame(root, bg="black")
frame.pack()



new_2_or_4()
new_2_or_4()

update_grid()

#score
score_label = Label(root, text="Score: " + str(score), font=("Helvetica", 20))
score_label.pack()

root.bind("<Key>", play)
new_game_button = Button(root, text="Replay", font=("Helvetica",15),fg= 'white', bg='#151B54',command=new_game)
new_game_button.pack(side='left')
quit_button =Button(root, text="Quit", font=("Helvetica", 15), fg='white', bg='#151B54', command=quit_game)
quit_button.pack(side='right')
root.mainloop()